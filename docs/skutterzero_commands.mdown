# SkutterZero documentation

## Getting set up

Import the library into your Python sketch:

    from skutterzero import *

...and make yourself a new Skutter to talk to. Mine's named `boris`:

    boris = Skutter("D07")

The identifier (`D07`) is the designation printed on the Skutter module.

You can now send your Skutter commands, for example:

    boris.LEDbrightness(255)
    boris.LEDcolour(0)

will set full brightness, and a colour (hue) of `0`, which displays as red.

## Servo commands

Your skutter understands a range of commands:

    skuttername.servo1speed(speed)
    skuttername.servo2speed(speed)

where `speed` is between `0` and `180`. For continuous rotation (360Â°) servos, `90` will be a dead stop, with values either side ranging from slow to full speed in either direction.

For conventional (angular) servos, the value you command is the deflection angle, again between `0` and `180` degrees. If it makes more sense to you, you can also use:

    skuttername.servo1position(speed)
    skuttername.servo2position(speed)

## LED commands

    skuttername.LEDcolour(hue)
    skuttername.LEDhue(hue)

These will set all connected LEDs to the hue you command, from `0` (red) through to `255` (also red).

    skuttername.setBrightness(brightness)

will set the overall LED brightness, from `0` to `255`. Note that we're using the Hue/Saturation/Brightness colour model throughout, here, and Saturation is always set to maximum.

### LED gradients

If your skutter has more than one LED attached, you can command either end of the strip and the skutter will interpolate the LEDs in between. So:

    skuttername.LEDstartHue(hue)
    skuttername.LEDendHue(hue)

...will set the hue of the start and end of the strip. There aren't (yet) corresponding `LEDstartBrightness` or `LEDendBrightness` commands.

## Animating things

You can command changes to happen over time, and let the skutter handle the details. The skutter will need to know where it starts (state `A`), where it finishes (state `B`), and details like how long it should take to get from `A` to `B` (`transitionsTime`) and what it should do when it gets there (`transitionType`).

    skuttername.transitionTime(seconds)

For now, you have to set duration manually. It may be possible for the skutter to know the camera rotation angle, and hence for us to set `transitionTime` by 'number of degrees through which the camera turns.' How might you use that?

Also note that the transitionTime is the same for *everything*: both servos, the lights, all of it. That's fixable, but I haven't got to it yet.

    skuttername.transitionType("ONCE")

Possible values here:

    "ONCE"    # transition from A to B, then stay at B.
    "LOOP"    # transition from A to B, then repeat.
    "RETURN"  # transition from A to B, back to A, then repeat.

Setting `A` and `B` states can be achieved through these commands:

    skuttername.servo1speedA(speed)
    skuttername.servo1speedB(speed)
    skuttername.servo2speedA(speed)
    skuttername.servo2speedB(speed)

The servo animation commands are also available as `.servo1positionA`, `.servo1positionB`, and so on. Use whichever makes most sense for your particular skutter.

    skuttername.LEDstartHueA(hue)
    skuttername.LEDstartHueB(hue)
    skuttername.LEDendHueA(hue)
    skuttername.LEDendHueB(hue)

